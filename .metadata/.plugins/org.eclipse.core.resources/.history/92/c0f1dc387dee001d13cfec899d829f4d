package com.forum.project.services;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.forum.project.model.Balance;
import com.forum.project.model.CuentaEmpresa;
import com.forum.project.response.BalanceResponseRest;
import com.forum.project.response.CuentaEmpresaResponseRest;

@Service
public class BalanceServiceImpl implements IBalanceService{

	Connection cn;
	String connectionUrl =
            "jdbc:sqlserver://localhost:1433;"
                    + "database=BD_NEOCON;"
                    + "user=sa;"
                    + "password=abril.2023;"
                    + "encrypt=true;"
                    + "trustServerCertificate=true;"
                    + "loginTimeout=30;";
	ResultSet rs;
	
	@Override
	@Transactional
	public ResponseEntity<BalanceResponseRest> saveBalance(Balance balance) {
		// TODO Auto-generated method stub
				CuentaEmpresaResponseRest response = new CuentaEmpresaResponseRest();
				List<CuentaEmpresa> cuentaEmpresas = new ArrayList<CuentaEmpresa>();
						
					try {
							cn = DriverManager.getConnection(connectionUrl);
							// Llamada al procedimiento almacenado
							CallableStatement cst = cn.prepareCall("{CALL SP_CREATE_CUENTA_EMPRESA(?,?,?,?,?) }");
							//Obtener Id
							cst.setInt(1, cuentaEmpresa.getEmpresaId());
							cst.setInt(2, cuentaEmpresa.getRubroId());
							cst.setInt(3, cuentaEmpresa.getCuentaCodigo());
							cst.setString(4, cuentaEmpresa.getCuentaDescripcion());
							cst.setString(5, cuentaEmpresa.getEstado());
							// Ejecuta el procedimiento almacenado
							rs = cst.executeQuery();
							while(rs.next()) {
								// Se obtienen la salida del procedimineto almacenado
								CuentaEmpresa cuentaEmpresass = new CuentaEmpresa();
								cuentaEmpresass.setCuentaEmpresaId(rs.getInt("ID_CUENTA_EMPRESA"));
								cuentaEmpresass.setEmpresaId(rs.getInt("EMPRESA_ID"));
								cuentaEmpresass.setRubroId(rs.getInt("RUBRO_ID"));
								cuentaEmpresass.setCuentaCodigo(rs.getInt("CUENTA_CODIGO"));
								cuentaEmpresass.setCuentaDescripcion(rs.getString("CUENTA_DESCRIPCION"));
								cuentaEmpresass.setCuentaTipo(rs.getString("CUENTA_TIPO"));
								cuentaEmpresass.setEstado(rs.getString("ESTADO"));
				            	cuentaEmpresas.add(cuentaEmpresass);
							}
							response.getCuentaEmpresaResponse().setCuentaEmpresa(cuentaEmpresas);
						} catch (SQLException e) {
							e.getStackTrace();
							return new ResponseEntity<CuentaEmpresaResponseRest>(response, HttpStatus.INTERNAL_SERVER_ERROR);
						} finally{
							try {
								cn.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						}	
						return new ResponseEntity<CuentaEmpresaResponseRest>(response, HttpStatus.OK);
	}
	
	
	

}
