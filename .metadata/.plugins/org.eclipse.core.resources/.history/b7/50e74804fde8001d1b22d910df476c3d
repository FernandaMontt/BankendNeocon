package com.forum.project.services;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.sql.ResultSet;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.List;

import java.util.ArrayList;
import com.forum.project.response.RubroResponseRest;
import com.forum.project.model.Rubro;

@Service
public class RubroServiceImpl implements IRubroService{
	
	Connection cn;
	String connectionUrl =
            "jdbc:sqlserver://localhost:1433;"
                    + "database=BD_NEOCON;"
                    + "user=sa;"
                    + "password=abril.2023;"
                    + "encrypt=true;"
                    + "trustServerCertificate=true;"
                    + "loginTimeout=30;";
	ResultSet rs;

	@Override
	public ResponseEntity<RubroResponseRest> findAll() {
		
		RubroResponseRest response = new RubroResponseRest();
		List<Rubro> rubros = new ArrayList<Rubro>();
		
	try {
			cn = DriverManager.getConnection(connectionUrl);
			// Llamada al procedimiento almacenado
			CallableStatement cst = cn.prepareCall("{CALL SP_ALL_RUBROS }");
            // Ejecuta el procedimiento almacenado
            rs = cst.executeQuery();
            while(rs.next()) {
            	// Se obtienen la salida del procedimineto almacenado
                Rubro rubro = new Rubro();
                rubro.setRubroId(rs.getInt("RUBRO_ID"));
                rubro.setRubroCodigo(rs.getString("Rubro"));
                rubro.setRubroDescripcion(rs.getString("Descripción"));
                rubro.setRubroNaturaleza(rs.getString("Naturaleza"));
                rubro.setRubroEstado(rs.getString("Estado"));
                rubros.add(rubro);
         }
			response.getRubroResponse().setRubro(rubros);
			//response.setMetadata("Respuesta ok", "00", "Respuesta exitosa");
			
		} catch(Exception e) {
			
			//response.setMetadata("Respuesta no ok", "-1", "Error al no consultar");
			e.getStackTrace();
			return new ResponseEntity<RubroResponseRest>(response, HttpStatus.INTERNAL_SERVER_ERROR);
			
		} finally{
			try {
				cn.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return new ResponseEntity<RubroResponseRest>(response, HttpStatus.OK);
		
	}

	@Override
	@Transactional(readOnly=true)
	public ResponseEntity<RubroResponseRest> findByRubroId(Integer Id) {
		
		RubroResponseRest response = new RubroResponseRest();
		List<Rubro> rubros = new ArrayList<Rubro>();
		
	try {
			cn = DriverManager.getConnection(connectionUrl);
			// Llamada al procedimiento almacenado
			CallableStatement cst = cn.prepareCall("{CALL SP_GET_SOURCEBYID_RUBROS(?) }");
			//Obtener Id
			cst.setString(1, Id.toString());
			// Ejecuta el procedimiento almacenado
			rs = cst.executeQuery();
			while(rs.next()) {
			// Se obtienen la salida del procedimineto almacenado
			Rubro rubro = new Rubro();
			rubro.setRubroId(rs.getInt("RUBRO_ID"));
			rubro.setRubroCodigo(rs.getString("Rubro"));
			rubro.setRubroDescripcion(rs.getString("Descripción"));
			rubro.setRubroNaturaleza(rs.getString("Naturaleza"));
			rubro.setRubroEstado(rs.getString("Estado"));
			rubros.add(rubro);
		}
			response.getRubroResponse().setRubro(rubros);
		} catch (SQLException e) {
			e.getStackTrace();
			return new ResponseEntity<RubroResponseRest>(response, HttpStatus.INTERNAL_SERVER_ERROR);
		} finally{
			try {
				cn.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}	
		return new ResponseEntity<RubroResponseRest>(response, HttpStatus.OK);
	}

	@Override
	@Transactional
	public ResponseEntity<RubroResponseRest> updatestate(Integer Id) {
		// TODO Auto-generated method stub
		RubroResponseRest response = new RubroResponseRest();
		List<Rubro> rubros = new ArrayList<Rubro>();
		
	try {
			cn = DriverManager.getConnection(connectionUrl);
			// Llamada al procedimiento almacenado
			CallableStatement cst = cn.prepareCall("{CALL SP_CHANGESTATE_RUBROS(?) }");
			//Obtener Id
			cst.setString(1, Id.toString());
			// Ejecuta el procedimiento almacenado
			rs = cst.executeQuery();
			while(rs.next()) {
				// Se obtienen la salida del procedimineto almacenado
				Rubro rubro = new Rubro();
				rubro.setRubroId(rs.getInt("RUBRO_ID"));
				rubro.setRubroCodigo(rs.getString("RUBRO_CODIGO"));
				rubro.setRubroDescripcion(rs.getString("RUBRO_DESCRIPCION"));
				rubro.setRubroNaturaleza(rs.getString("RUBRO_NATURALEZA"));
				rubro.setRubroEstado(rs.getString("RUBRO_ESTADO"));
				rubros.add(rubro);
			}
			response.getRubroResponse().setRubro(rubros);
		} catch (SQLException e) {
			e.getStackTrace();
			return new ResponseEntity<RubroResponseRest>(response, HttpStatus.INTERNAL_SERVER_ERROR);
		} finally{
			try {
				cn.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}	
		return new ResponseEntity<RubroResponseRest>(response, HttpStatus.OK);
	}

	@Override
	@Transactional(readOnly=true)
	public ResponseEntity<RubroResponseRest> findByRubroCodigo(String Codigo) {
		RubroResponseRest response = new RubroResponseRest();
		List<Rubro> rubros = new ArrayList<Rubro>();
		
	try {
			cn = DriverManager.getConnection(connectionUrl);
			// Llamada al procedimiento almacenado
			CallableStatement cst = cn.prepareCall("{SP_GET_SOURCEBYCODIGO_RUBROS('?') }");
			//Obtener Id
			cst.setString(1, Codigo.toString());
			// Ejecuta el procedimiento almacenado
			rs = cst.executeQuery();
			while(rs.next()) {
			// Se obtienen la salida del procedimineto almacenado
			Rubro rubro = new Rubro();
			rubro.setRubroId(rs.getInt("RUBRO_ID"));
			rubro.setRubroCodigo(rs.getString("Rubro"));
			rubro.setRubroDescripcion(rs.getString("Descripción"));
			rubro.setRubroNaturaleza(rs.getString("Naturaleza"));
			rubro.setRubroEstado(rs.getString("Estado"));
			rubros.add(rubro);
		}
			response.getRubroResponse().setRubro(rubros);
		} catch (SQLException e) {
			e.getStackTrace();
			return new ResponseEntity<RubroResponseRest>(response, HttpStatus.INTERNAL_SERVER_ERROR);
		} finally{
			try {
				cn.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}	
		return new ResponseEntity<RubroResponseRest>(response, HttpStatus.OK);
	}

	@Override
	@Transactional
	public ResponseEntity<RubroResponseRest> saveRubros(Rubro rubro) {
		// TODO Auto-generated method stub
		RubroResponseRest response = new RubroResponseRest();
		List<Rubro> rubros = new ArrayList<Rubro>();
		
	try {
			cn = DriverManager.getConnection(connectionUrl);
			// Llamada al procedimiento almacenado
			CallableStatement cst = cn.prepareCall("{CALL SP_CREATE_RUBROS(?,?,?,?) }");
			//Obtener Id
			cst.setString(1, rubro.getRubroCodigo());
			cst.setString(2, rubro.getRubroDescripcion());
			cst.setString(3, rubro.getRubroNaturaleza());
			cst.setString(4, rubro.getRubroEstado());
			// Ejecuta el procedimiento almacenado
			rs = cst.executeQuery();
			while(rs.next()) {
				// Se obtienen la salida del procedimineto almacenado
				Rubro rubross = new Rubro();
				rubross.setRubroId(rs.getInt("RUBRO_ID"));
				rubross.setRubroCodigo(rs.getString("RUBRO_CODIGO"));
				rubross.setRubroDescripcion(rs.getString("RUBRO_DESCRIPCION"));
				rubross.setRubroNaturaleza(rs.getString("RUBRO_NATURALEZA"));
				rubross.setRubroEstado(rs.getString("RUBRO_ESTADO"));
				rubros.add(rubross);
			}
			response.getRubroResponse().setRubro(rubros);
		} catch (SQLException e) {
			e.getStackTrace();
			return new ResponseEntity<RubroResponseRest>(response, HttpStatus.INTERNAL_SERVER_ERROR);
		} finally{
			try {
				cn.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}	
		return new ResponseEntity<RubroResponseRest>(response, HttpStatus.OK);
	}

	@Override
	@Transactional
	public ResponseEntity<RubroResponseRest> updateRubros(Rubro rubro) {
		// TODO Auto-generated method stub
		RubroResponseRest response = new RubroResponseRest();
		List<Rubro> rubros = new ArrayList<Rubro>();
		
	try {
			cn = DriverManager.getConnection(connectionUrl);
			// Llamada al procedimiento almacenado
			CallableStatement cst = cn.prepareCall("{CALL SP_UPDATE_RUBROS(?,?,?,?,?) }");
			//Obtener Id
			cst.setString(1, rubro.getRubroId().toString());
			cst.setString(2, rubro.getRubroCodigo());
			cst.setString(3, rubro.getRubroDescripcion());
			cst.setString(4, rubro.getRubroNaturaleza());
			cst.setString(5, rubro.getRubroEstado());
			// Ejecuta el procedimiento almacenado
			rs = cst.executeQuery();
			while(rs.next()) {
				// Se obtienen la salida del procedimineto almacenado
				Rubro rubross = new Rubro();
				rubross.setRubroId(rs.getInt("RUBRO_ID"));
				rubross.setRubroCodigo(rs.getString("RUBRO_CODIGO"));
				rubross.setRubroDescripcion(rs.getString("RUBRO_DESCRIPCION"));
				rubross.setRubroNaturaleza(rs.getString("RUBRO_NATURALEZA"));
				rubross.setRubroEstado(rs.getString("RUBRO_ESTADO"));
				rubros.add(rubross);
			}
			response.getRubroResponse().setRubro(rubros);
		} catch (SQLException e) {
			e.getStackTrace();
			return new ResponseEntity<RubroResponseRest>(response, HttpStatus.INTERNAL_SERVER_ERROR);
		} finally{
			try {
				cn.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}	
		return new ResponseEntity<RubroResponseRest>(response, HttpStatus.OK);
	}

}
